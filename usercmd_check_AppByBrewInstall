#!/usr/bin/env bash

################################################################################
# 脚本功能：
# 1. 统计并检查 Homebrew 已安装的 Formula 和 Cask 是否仍然存在
# 2. 兼容 keg-only 的库类 Formula（如 libssh2）
# 3. 仅通过 .app 文件检测 Cask 的安装状态
# 4. 显示单行进度条；结束后分组打印 [ERROR] / [OK]；同时写入日志文件
################################################################################

# 日志文件
OUTPUT_FILE="brew_installation_check.log"
> "$OUTPUT_FILE"  # 清空旧日志

# 颜色定义
GREEN='\033[0;32m'
RED='\033[0;31m'
RESET='\033[0m'

# 结果数组
OK_RESULTS=()
ERROR_RESULTS=()

# 调试模式（可选）
DEBUG=true
# DEBUG=false

###############################################################################
# 函数：显示单行进度条
###############################################################################
show_progress() {
    local current=$1
    local total=$2
    local percent=$((current * 100 / total))
    local bar_width=50
    local filled=$((bar_width * current / total))
    local empty=$((bar_width - filled))

    printf "\rProgress: |%-${bar_width}s| %3d%%" \
      "$(printf '#%.0s' $(seq 1 $filled))$(printf ' %.0s' $(seq 1 $empty))" \
      "$percent"
}

# 确保 jq 已安装
if ! command -v jq &>/dev/null; then
    echo -e "Error: 'jq' is not installed. Please install it using 'brew install jq' and rerun the script."
    exit 1
fi

echo -e "Gathering installed Formulae and Casks..."

###############################################################################
# 1. 获取全部已安装的 Formula 和 Cask
###############################################################################
FORMULAE=$(brew list --formula)
CASKS=$(brew list --cask)

FORMULA_COUNT=$(echo -e "$FORMULAE" | wc -l | tr -d ' ')
CASK_COUNT=$(echo -e "$CASKS" | wc -l | tr -d ' ')
TOTAL=$((FORMULA_COUNT + CASK_COUNT))

# 进度计数器
INDEX=0

printf "Found %d Formulae and %d Casks, total %d.\n" "$FORMULA_COUNT" "$CASK_COUNT" "$TOTAL"

###############################################################################
# 2. 检查 Formula
###############################################################################
echo -e "Checking installed Formulae..."

for formula in $FORMULAE; do
    ((INDEX++))
    show_progress "$INDEX" "$TOTAL"

    # 获取 Formula 的 JSON 信息
    formula_json=$(brew info --formula --json=v2 "$formula" 2>/dev/null)
    if [ -z "$formula_json" ]; then
        ERROR_RESULTS+=("[ERROR] Formula '$formula' => 'brew info --json=v2' returned empty. Possibly removed?")
        continue
    fi

    # 从 JSON 中读取 keg_only 字段
    kegonly=$(echo -e "$formula_json" | jq -r '.formula[0].keg_only' 2>/dev/null)
    if [ -z "$kegonly" ]; then
        ERROR_RESULTS+=("[ERROR] Formula '$formula' => cannot parse 'keg_only' from JSON. Possibly broken formula info?")
        continue
    fi

    # 如果 keg_only 不等于 "false"，则视为 keg-only
    if [ "$kegonly" != "false" ]; then
        OK_RESULTS+=("[OK] Formula '$formula' => keg-only library. No executable needed.")
        continue
    fi

    # 若不是 keg-only，则继续检查可执行文件
    formula_files=$(brew list --formula "$formula" 2>/dev/null)
    if [ -z "$formula_files" ]; then
        ERROR_RESULTS+=("[ERROR] Formula '$formula' => no installed files listed. Possibly removed?")
        continue
    fi

    found_executable=false

    while IFS= read -r file; do
        if [ -e "$file" ]; then
            # 检查是否在 bin/ 目录下或是否有执行权限
            if [[ "$file" == */bin/* ]] || [ -x "$file" ]; then
                found_executable=true
                break
            fi
        fi
    done <<< "$formula_files"

    if [ "$found_executable" = true ]; then
        # 只显示第一个可执行文件
        local_first=$(echo -e "$formula_files" | grep '/bin/' | head -n 1)
        if [ -z "$local_first" ]; then
            # 如果没有在 bin/ 目录下找到，取第一个有执行权限的文件
            local_first=$(echo -e "$formula_files" | while IFS= read -r f; do
                if [ -x "$f" ]; then
                    echo -e "$f"
                    break
                fi
            done)
        fi
        OK_RESULTS+=("[OK] Formula '$formula' => found executable: $local_first")
    else
        ERROR_RESULTS+=("[ERROR] Formula '$formula' => installed files found, but no bin/executable recognized.")
    fi
done

###############################################################################
# 3. 检查 Cask
###############################################################################
echo -e -e "\nChecking installed Casks..."

for cask in $CASKS; do
    ((INDEX++))
    show_progress "$INDEX" "$TOTAL"

    # 获取 Cask 的 JSON 信息
    cask_json=$(brew info --cask --json=v2 "$cask" 2>/dev/null)
    if [ -z "$cask_json" ]; then
        ERROR_RESULTS+=("[ERROR] Cask '$cask' => 'brew info --cask --json=v2' returned empty. Possibly removed or unknown?")
        continue
    fi

    # 使用 jq 提取 .app[] 文件名
    app_names=$(echo -e "$cask_json" | jq -r '
        .casks[].artifacts[] | 
        select(has("app")) | 
        .app[]?
    ' 2>/dev/null)

    # 提取应用程序名称（不包括 .app 后缀）
    # 例如，"SynologyAssistant.app" -> "SynologyAssistant"
    app_names_clean=$(echo -e "$app_names" | sed 's/\.app$//')

    if [ "$DEBUG" = true ]; then
        echo -e "Debug: Cask '$cask' has app names: $app_names_clean"
    fi

    # 标记是否找到安装状态
    status_found=false

    # 1. 检查 .app 文件
    if [ -n "$app_names_clean" ]; then
        while IFS= read -r app_name; do
            # 构建完整的 .app 路径，处理空格和特殊字符
            app_path="/Applications/${app_name}.app"
            if [ -d "$app_path" ]; then
                OK_RESULTS+=("[OK] Cask '$cask' => found .app: $app_path")
                status_found=true
                break
            fi

            # 如果在 /Applications/ 未找到，尝试在用户目录下的 Applications
            app_path_user="/Users/$(whoami)/Applications/${app_name}.app"
            if [ -d "$app_path_user" ]; then
                OK_RESULTS+=("[OK] Cask '$cask' => found .app: $app_path_user")
                status_found=true
                break
            fi
        done <<< "$app_names_clean"
    fi

    # 2. 如果未找到 .app 文件，标记为错误
    if [ "$status_found" = false ]; then
        ERROR_RESULTS+=("[ERROR] Cask '$cask' => .app files not found in /Applications/ or ~/Applications/.")
    fi
done

###############################################################################
# 4. 检查完成，输出最终结果
###############################################################################
printf "\n\nCheck completed.\n"

# 打印 ERROR
echo -e -e "\n${RED}Summary of ERROR results:${RESET}"
if [ ${#ERROR_RESULTS[@]} -eq 0 ]; then
    echo -e "No errors found."
else
    for err in "${ERROR_RESULTS[@]}"; do
        echo -e -e "${RED}$err${RESET}"
        echo -e "$err" >> "$OUTPUT_FILE"
    done
fi

# 打印 OK
echo -e -e "\n${GREEN}Summary of OK results:${RESET}"
if [ ${#OK_RESULTS[@]} -eq 0 ]; then
    echo -e "No OK results found."
else
    for ok in "${OK_RESULTS[@]}"; do
        echo -e -e "${GREEN}$ok${RESET}"
        echo -e "$ok" >> "$OUTPUT_FILE"
    done
fi

echo -e -e "\nResults saved to $OUTPUT_FILE"