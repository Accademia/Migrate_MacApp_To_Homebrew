#!/bin/bash

# 输出文件名
OUTPUT_FILE="non_brew_non_mas_apps.txt"
INSTALL_COMMANDS_FILE="brew_install_commands.txt"

# 创建临时目录和文件
TMP_DIR=$(mktemp -d)
ALL_APPS_FILE="$TMP_DIR/all_apps.txt"
BREW_CASK_FILE="$TMP_DIR/brew_cask.txt"
BREW_APP_PATHS_FILE="$TMP_DIR/brew_app_paths.txt"
AVAILABLE_CASKS_FILE="$TMP_DIR/available_casks.txt"
SYSTEM_APPS_FILE="$TMP_DIR/system_apps.txt"

# 强制更新 Spotlight 索引
echo "正在强制更新 Spotlight 索引..."
mdimport /Applications

# 获取所有已安装的应用程序
echo "正在查找所有已安装的应用程序..."
find /Applications -name "*.app" -maxdepth 3 2>/dev/null | sort > "$ALL_APPS_FILE"
find ~/Applications -name "*.app" -maxdepth 3 2>/dev/null | sort >> "$ALL_APPS_FILE"

# 获取系统应用信息（包括 Mac App Store 应用）
echo "正在获取系统应用信息..."
system_profiler SPApplicationsDataType -json > "$SYSTEM_APPS_FILE"

# 获取通过 Homebrew 安装的应用程序
echo "正在查找通过 Homebrew 安装的应用程序..."
if command -v brew &> /dev/null; then
    # 获取已安装的 cask 列表
    brew list --cask > "$BREW_CASK_FILE"
    echo "获取所有可用的 Homebrew cask 应用..."
    brew search --casks "" > "$AVAILABLE_CASKS_FILE"

    # 初始化 Homebrew 应用路径文件
    > "$BREW_APP_PATHS_FILE"

    total_casks=$(wc -l < "$BREW_CASK_FILE")
    echo "正在并行获取 $total_casks 个已安装 cask 的详细信息..."

    # 创建临时目录存储 cask 的 JSON 文件
    INFO_DIR="$TMP_DIR/cask_info"
    mkdir -p "$INFO_DIR"

    # 并行获取 cask 信息，带重试机制
    pids=()
    while IFS= read -r cask; do
        (
            for attempt in {1..3}; do
                if brew info --cask --json=v2 "$cask" > "$INFO_DIR/$cask.json" 2>/dev/null; then
                    break
                fi
                sleep 1
            done
        ) &
        pids+=($!)
    done < "$BREW_CASK_FILE"

    # 等待所有后台作业完成
    for pid in "${pids[@]}"; do
        wait "$pid"
    done

    # 处理每个 cask 的 JSON 文件
    for json_file in "$INFO_DIR"/*.json; do
        [[ ! -f "$json_file" ]] && continue
        cask=$(basename "$json_file" .json)
        # 提取 artifacts 中的 app 路径
        app_paths=$(jq -r '.casks[].artifacts[] | select(.app) | .app[]' "$json_file" 2>/dev/null)
        if [[ -n "$app_paths" ]]; then
            while IFS= read -r app_path; do
                # 替换 ~ 为用户的 home 目录
                app_path=$(echo "$app_path" | sed "s|~|$HOME|g")
                # 规范化路径
                if [[ "$app_path" != /* ]]; then
                    app_path="/Applications/$app_path"
                fi
                # 检查路径是否存在并转为真实路径
                if [[ -d "$app_path" ]]; then
                    real_path=$(realpath "$app_path" 2>/dev/null || echo "$app_path")
                    echo "$real_path" >> "$BREW_APP_PATHS_FILE"
                fi
            done <<< "$app_paths"
        fi
    done
else
    echo "警告: 未找到 'brew' 命令，无法检测 Homebrew 应用。"
    touch "$BREW_CASK_FILE" "$BREW_APP_PATHS_FILE" "$AVAILABLE_CASKS_FILE"
fi

# 比较应用列表
echo "正在比较应用列表..."
rm -f "$OUTPUT_FILE" "$INSTALL_COMMANDS_FILE"
touch "$OUTPUT_FILE" "$INSTALL_COMMANDS_FILE"

echo "找到以下非 Homebrew 非 Mac App Store 安装的应用程序:" | tee "$OUTPUT_FILE"
echo "============================================================" | tee -a "$OUTPUT_FILE"
echo "# 可通过 Homebrew 重新安装的应用程序安装命令：" > "$INSTALL_COMMANDS_FILE"
echo "# 运行方法：逐行复制以下命令到终端，或将整个文件作为脚本执行" >> "$INSTALL_COMMANDS_FILE"
echo "" >> "$INSTALL_COMMANDS_FILE"

# 函数：检查应用是否为 Mac App Store 应用
is_mas_app() {
    local app_path="$1"
    local real_path=$(realpath "$app_path" 2>/dev/null || echo "$app_path")

    # 方法 1: 检查 _MASReceipt/receipt 文件
    if [[ -f "$real_path/Contents/_MASReceipt/receipt" ]]; then
        return 0
    fi

    # 方法 2: 使用 mdls 检查 kMDItemAppStoreHasReceipt
    if mdls -name kMDItemAppStoreHasReceipt "$real_path" 2>/dev/null | grep -q "kMDItemAppStoreHasReceipt = 1"; then
        return 0
    fi

    # 方法 3: 使用 system_profiler 检查 Obtained from
    obtained_from=$(jq -r --arg path "$real_path" '.SPApplicationsDataType[] | select(.path == $path) | .obtained_from' "$SYSTEM_APPS_FILE" 2>/dev/null)
    if [[ "$obtained_from" == "Mac App Store" || "$obtained_from" == "Apple" ]]; then
        return 0
    fi

    # 方法 4: 检查应用的签名
    signature=$(codesign -dv --verbose=4 "$real_path" 2>&1 | grep 'Authority=' | head -n1)
    if [[ "$signature" == *"Apple Development"* || "$signature" == *"Apple Distribution"* || "$signature" == *"Apple Mac OS Application Signing"* ]]; then
        return 0
    fi

    return 1
}

# 函数：检查应用是否通过 Homebrew 安装
is_brew_app() {
    local app_path="$1"
    local real_path=$(realpath "$app_path" 2>/dev/null || echo "$app_path")
    local app_name=$(basename "$app_path" .app | tr '[:upper:]' '[:lower:]')

    # 方法 1: 检查路径是否在 BREW_APP_PATHS_FILE 中
    if grep -Fx "$real_path" "$BREW_APP_PATHS_FILE" >/dev/null; then
        return 0
    fi

    # 方法 2: 检查应用名是否与已安装的 cask 匹配
    cask_name=$(echo "$app_name" | sed 's/ /-/g')
    if grep -Fx "$cask_name" "$BREW_CASK_FILE" >/dev/null; then
        return 0
    fi

    return 1
}

# 检查每个应用
while IFS= read -r app_path; do
    [[ ! "$app_path" =~ \.app$ ]] && continue

    app_name=$(basename "$app_path" .app)
    app_name_lower=$(echo "$app_name" | tr '[:upper:]' '[:lower:]')
    real_path=$(realpath "$app_path" 2>/dev/null || echo "$app_path")

    # 检查是否为 Mac App Store 应用
    if is_mas_app "$real_path"; then
        continue
    fi

    # 检查是否通过 Homebrew 安装
    if is_brew_app "$real_path"; then
        continue
    fi

    # 输出非 Homebrew 非 Mac App Store 安装的应用
    echo "$app_path" | tee -a "$OUTPUT_FILE"

    # 查找对应的 Homebrew cask
    found_cask=""
    matched_cask=$(grep -i "^$app_name_lower$" "$AVAILABLE_CASKS_FILE" | head -1)
    if [[ -n "$matched_cask" ]]; then
        found_cask="$matched_cask"
    elif [[ -z "$found_cask" ]]; then
        with_dash=$(echo "$app_name_lower" | sed 's/ /-/g')
        matched_cask=$(grep -i "^$with_dash$" "$AVAILABLE_CASKS_FILE" | head -1)
        [[ -n "$matched_cask" ]] && found_cask="$matched_cask"
    fi

    if [[ -n "$found_cask" ]]; then
        echo "brew install --cask $found_cask  # 对应 $app_path" >> "$INSTALL_COMMANDS_FILE"
    fi
done < "$ALL_APPS_FILE"

echo "============================================================" | tee -a "$OUTPUT_FILE"
echo "结果已保存至 $OUTPUT_FILE 文件" | tee -a "$OUTPUT_FILE"
echo "可通过 Homebrew 安装的命令已保存至 $INSTALL_COMMANDS_FILE 文件" | tee -a "$OUTPUT_FILE"

# 清理临时文件
rm -rf "$TMP_DIR"